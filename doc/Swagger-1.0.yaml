openapi: 3.0.1
info:
  title: Appointment Management Service
  description: Appointment Management Service
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/v0
security:
  - BearerAuth: [ ]
paths:
  /customers:
    get:
      summary: Retrieve all customers.
      description: Retrieve all customers available.
      operationId: getCustomers
      tags:
        - customer
      parameters:
        - in: query
          name: sort
          description: |
            Param for the entity to sort. Param available to sort:
            - firstName
            - lastName
            - createdDate
            - updatedDate
          schema:
            type: string
        - in: query
          name: order
          description: Param for the entity to sort
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: A JSON array of customer info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add new customer.
      description: Add new customer by providing in required details in the request body.
      operationId: addCustomer
      tags:
        - customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDTO'
      responses:
        '201':
          description: Customer info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /customers/{customerId}:
    get:
      summary: Retrieve customer details.
      description: Retrieve specific customer details.
      operationId: getCustomer
      tags:
        - customer
      parameters:
        - in: path
          name: customerId
          required: true
          description: Customer UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update customer details.
      description: Update sepcific customer details based on the customer id.
      operationId: updateCustomer
      tags:
        - customer
      parameters:
        - in: path
          name: customerId
          required: true
          description: Customer UUID
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/UpdateCustomerRequestBody'
      responses:
        '200':
          description: Updated customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /services:
    get:
      summary: Retrieve all services.
      description: Retrieve all services available.
      operationId: getServices
      tags:
        - service
      parameters:
        - in: query
          name: sort
          description: |
            Param for the entity to sort. Param available to sort:
            - name
            - type
            - price
            - createdDate
          schema:
            type: string
        - in: query
          name: order
          description: Param for the entity to sort
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: A JSON array of services info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceListResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add new services.
      description: Add new services by providing required details in the request body.
      operationId: addService
      tags:
        - service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceDTO'
      responses:
        '201':
          description: Service info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /services/{serviceId}:
    get:
      summary: Retrieve service details.
      description: Retrieve specific service details.
      operationId: getService
      tags:
        - service
      parameters:
        - in: path
          name: serviceId
          required: true
          description: Service UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Service info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update service info details.
      description: Update specific service info details based on the service id.
      operationId: updateService
      tags:
        - service
      parameters:
        - in: path
          name: serviceId
          required: true
          description: Service UUID
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/UpdateServiceRequestBody'
      responses:
        '200':
          description: Updated service info details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete service info details.
      description: Delete specific service info details based on the service id.
      operationId: deleteService
      tags:
        - service
      parameters:
        - in: path
          name: serviceId
          required: true
          description: Service UUID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Service deleted
        '401':
          $ref: '#/components/responses/Unauthorised'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /serviceTypes:
    get:
      summary: Retrieve all service types.
      description: Retrieve all service types available.
      operationId: getServiceTypes
      tags:
        - serviceType
      responses:
        '200':
          description: A JSON array of service types info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTypeListResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add new service Type.
      description: Add new service type by providing required details in the request body.
      operationId: addServiceType
      tags:
        - serviceType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceTypeDTO'
      responses:
        '201':
          description: Service type info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTypeResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /serviceTypes/{serviceTypeId}:
    put:
      summary: Update service type info details.
      description: Update specific service type info details based on the service type id.
      operationId: updateServiceType
      tags:
        - serviceType
      parameters:
        - in: path
          name: serviceTypeId
          required: true
          description: Service UUID
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/UpdateServiceTypeRequestBody'
      responses:
        '200':
          description: Updated service type info details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTypeResponse'
        '401':
          $ref: '#/components/responses/Unauthorised'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete service type info details.
      description: Delete specific service type info details based on the service id.
      operationId: deleteServiceType
      tags:
        - serviceType
      parameters:
        - in: path
          name: serviceTypeId
          required: true
          description: Service UUID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Service type deleted
        '401':
          $ref: '#/components/responses/Unauthorised'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseError'
          example:
            code: 400
            message: Bad Request
    Unauthorised:
      description: Unauthorised
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseError'
          example:
            code: 401
            message: Unauthorised
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseError'
          example:
            code: 404
            message: Not Found
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseError'
          example:
            code: 500
            message: Internal Server Error

  schemas:
    BaseError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    CustomerListResponse:
      type: object
      properties:
        data:
          type: array
          description: Lists of customer
          items:
            $ref: '#/components/schemas/CustomerDTO'
    CustomerResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CustomerDTO'
    CustomerDTO:
      type: object
      required:
        - firstName
        - LastName
        - phoneNumber
      properties:
        firstName:
          type: string
          description: Customer First Name
        lastName:
          type: string
          description: Customer Last Name
        phoneNumber:
          type: string
          description: Customer Phone Number
        emailAddress:
          type: string
          format: email
          description: Customer Email Address
        createdDate:
          type: string
          format: 'date-time'
          description: Customer Created Date
        updatedDate:
          type: string
          format: 'date-time'
          description: Customer Info Updated Date
    ServiceTypeListResponse:
      type: object
      properties:
        data:
          type: array
          description: Lists of service type
          items:
            $ref: '#/components/schemas/ServiceTypeDTO'
    ServiceTypeResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ServiceTypeDTO'
    ServiceTypeDTO:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Service Type
        description:
          type: string
          description: Service description
        createdDate:
          type: string
          format: 'date-time'
          description: Service Type Created Date
        updatedDate:
          type: string
          format: 'date-time'
          description: Service Type Info Updated Date
    ServiceListResponse:
      type: object
      properties:
        data:
          type: array
          description: Lists of service
          items:
            $ref: '#/components/schemas/ServiceDTO'
    ServiceResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ServiceDTO'
    ServiceDTO:
      type: object
      required:
        - name
        - description
        - type
        - price
      properties:
        name:
          type: string
          description: Service Name
        description:
          type: string
          description: Service Description
        details:
          type: string
          description: Service Details
        type:
          $ref: '#/components/schemas/ServiceTypeDTO'
        price:
          type: number
          description: Price for the service
        createdDate:
          type: string
          format: 'date-time'
          description: Service Created Date
        updatedDate:
          type: string
          format: 'date-time'
          description: Service Info Updated Date

  requestBodies:
    UpdateCustomerRequestBody:
      description: Request body to perform update customer
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerDTO'
    UpdateServiceRequestBody:
      description: Request body to perform update service
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceDTO'
    UpdateServiceTypeRequestBody:
      description: Request body to perform update service type
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceTypeDTO'